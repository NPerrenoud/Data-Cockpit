name: Versioning Workflow

on:
  pull_request:
    types:
      - closed

jobs:
  update-versions:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install lxml packaging

    - name: Extract Module Updates from PR Description
      id: extract_updates
      run: |
        #!/bin/bash

        # Extract the pull request body
        PR_BODY=$(jq -r .pull_request.body < "$GITHUB_EVENT_PATH")

        # Initialize variables
        PATCH_MODULES=()
        MINOR_MODULES=()
        MAJOR_MODULES=()

        # Check for module updates
        while read -r line; do
          case $line in
            *"tree"* )
              MODULE_NAME="tree"
              ;;
            *"database"* )
              MODULE_NAME="database"
              ;;
            *"visualizer"* )
              MODULE_NAME="visualizer"
              ;;
            *"general_libraries"* )
              MODULE_NAME="general_libraries"
              ;;
            *"- [x] Patch update(s)"* )
              PATCH_MODULES+=($MODULE_NAME)
              ;;
            *"- [x] Minor update(s)"* )
              MINOR_MODULES+=($MODULE_NAME)
              ;;
            *"- [x] Major update(s)"* )
              MAJOR_MODULES+=($MODULE_NAME)
              ;;
          esac
        done <<< "$PR_BODY"

        # Save the modules to GitHub environment
        echo "PATCH_MODULES=${PATCH_MODULES[@]}" >> $GITHUB_ENV
        echo "MINOR_MODULES=${MINOR_MODULES[@]}" >> $GITHUB_ENV
        echo "MAJOR_MODULES=${MAJOR_MODULES[@]}" >> $GITHUB_ENV

    - name: Print Extracted Modules
      run: |
        echo "Patch Modules: ${{ env.PATCH_MODULES }}"
        echo "Minor Modules: ${{ env.MINOR_MODULES }}"
        echo "Major Modules: ${{ env.MAJOR_MODULES }}"

    - name: Update Patch Modules
      if: env.PATCH_MODULES != ''
      run: |
        for module in $PATCH_MODULES; do
          mvn -f $module/pom.xml build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}'
        done

    - name: Update Minor Modules
      if: env.MINOR_MODULES != ''
      run: |
        for module in $MINOR_MODULES; do
          mvn -f $module/pom.xml build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0'
        done

    - name: Update Major Modules
      if: env.MAJOR_MODULES != ''
      run: |
        for module in $MAJOR_MODULES; do
          mvn -f $module/pom.xml build-helper:parse-version versions:set -DnewVersion='${parsedVersion.nextMajorVersion}.0.0


    - name: Update Parent Properties
      run: |
        mvn versions:update-properties

    - name: Determine Overall Update Level
      id: update_level
      run: |
        if [ -n "$MAJOR_MODULES" ]; then
          echo "update_level=major" >> $GITHUB_ENV
        elif [ -n "$MINOR_MODULES" ]; then
          echo "update_level=minor" >> $GITHUB_ENV
        else
          echo "update_level=patch" >> $GITHUB_ENV
        fi

    - name: Run Python Script to Update Parent Version
      run: |
        NEW_VERSION=$(python3 update_parent_version.py ${{ env.update_level }})
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

    - name: Update Child Modules
      run: |
        mvn -N versions:update-child-modules
        
    - name: Check PR Description
      id: description-checker
      uses: jadrol/pr-description-checker-action@v1.0.0
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        exempt-labels: no qa
        
    - name: Update Changelog
      run: |
        NEW_VERSION="${{ env.NEW_VERSION }}"
        PR_DESCRIPTION=$(jq -r '.pull_request.body' "$GITHUB_EVENT_PATH" | awk '/## Changelog Information/,/-->/ {found = 1; next} found')
        DATE=$(date +'%Y.%m.%d')
    
        echo "NEW_VERSION=${NEW_VERSION}"
        echo "PR_DESCRIPTION=${PR_DESCRIPTION}"
        echo "DATE=${DATE}"
    
        if [ "${{ env.update_level }}" == 'patch' ]; then
          # Insert entry into CHANGELOG.md under Unreleased section
          echo -e "### ${NEW_VERSION}\n${PR_DESCRIPTION}" | sed -i '/## Unreleased/r /dev/stdin' CHANGELOG.md
        else
          NEW_ENTRY="## ${NEW_VERSION} (${DATE})\n${PR_DESCRIPTION}"
          # Insert new entry into CHANGELOG.md under Unreleased section
          echo -e "${NEW_ENTRY}" | sed -i '/## Unreleased/r /dev/stdin' CHANGELOG.md
        fi

    - name: Commit and Push Changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Update CHANGELOG and module versions based on PR #${{ github.event.pull_request.number }}"
        git push origin main

    - name: Tag and Release
      if: env.update_level != 'patch'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        NEW_VERSION="${{ steps.update_parent_version.outputs.new_version }}"

        echo "Creating ${{ env.update_level }} release: v${NEW_VERSION}"

        # Create a release using GitHub API
        TAG_NAME="v${NEW_VERSION}"
        RELEASE_TITLE="${{ env.update_level }} release: ${TAG_NAME}"
        RELEASE_BODY=$(cat CHANGELOG.md)

        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$RELEASE_TITLE\",\"body\":\"$RELEASE_BODY\"}"
